"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Beforeunload = function (_React$Component) {
  _inherits(Beforeunload, _React$Component);

  function Beforeunload() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Beforeunload);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Beforeunload.__proto__ || Object.getPrototypeOf(Beforeunload)).call.apply(_ref, [this].concat(args))), _this), _this.handleBeforeunload = function (event) {
      var onBeforeunload = _this.props.onBeforeunload;

      var returnValue = void 0;

      if (onBeforeunload) {
        returnValue = onBeforeunload(event);
      }

      if (typeof returnValue === "string") {
        event.returnValue = returnValue;
        return returnValue;
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Beforeunload, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener("beforeunload", this.handleBeforeunload);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener("beforeunload", this.handleBeforeunload);
    }
  }, {
    key: "render",
    value: function render() {
      var _props$children = this.props.children,
          children = _props$children === undefined ? null : _props$children;

      return children;
    }
  }]);

  return Beforeunload;
}(_react2.default.Component);

Beforeunload.propTypes = {
  children: _propTypes2.default.any,
  onBeforeunload: _propTypes2.default.func.isRequired
};
exports.default = Beforeunload;